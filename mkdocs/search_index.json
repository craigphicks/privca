{
    "docs": [
        {
            "location": "/",
            "text": "Summary\n\n\n\nClient Side Authentification is the counterpart to Server Authentication in HTTPS, together making Two-way Authentication.  Using a private CA (Certificate Authority) to issue both Server and Client certificates is a sensible approach.  This document provides a step-by-step example where \nlighttpd v1.4.45\n is server, and Firebox Browser v65.0 is client.\n\n\n\n\n\n\n Example setup with \nlighttpd\n and \nFirefox\n\n\n\n\n\n\n\n\nSpecs for the certs\n\n\n\nWe describe the certs and what fields they must contain.\nA table is used to show what role they play in authentication. \n\n\n\n\n\n\nWe need one private root and two leaf certificates with the following specifications:\n\n\n\n\n\n\n\n\n\nProperty\n\n\nCA cert\n\n\nServer cert\n\n\nClient cert\n\n\n\n\n\n\n\n\n\n\ntype\n\n\nCA\n\n\nLeaf\n\n\nLeaf\n\n\n\n\n\n\nCN (common name)\n\n\nRoot1\n\n\nServer1\n\n\nClient1\n\n\n\n\n\n\nsubjectAltName\n\n\nN/A\n\n\nDNS:pihole.home.lan,DNS:pihole,IP:192.168.1.20\n\n\nN/A\n\n\n\n\n\n\nKey filename\n\n\nRoot1.key\n\n\nServer1.key\n\n\nClient1.key\n\n\n\n\n\n\nCert filname\n\n\nRoot1.crt\n\n\nServer1.crt\n\n\nClient1.crt\n\n\n\n\n\n\nKey+Cert filename\n\n\nN/A\n\n\nServer1.key-crt.pem\n\n\nClient1.p12\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe will show step by step how to create these certs using our simple script file \nprivca\n.\n\n\n\nOf course you can use any method or tools to create the certs as long as they fulfill the above specifications.\nIf you do so you may proceed directly to the \nstep by step guide to installation\n.\n\n\n\nOverview of each cert role\n\n\n\nThe combined key+cert files shown in the bottom row of \ntable 1\n are composed as follows:\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\nKey Part source file\n\n\nCert Part source file\n\n\nCombined File\n\n\n\n\n\n\n\n\n\n\nServer\n\n\nServer1.key\n\n\nServer1.crt\n\n\nServer1.key-crt.pem\n\n\n\n\n\n\nClient\n\n\nClient1.key\n\n\nClient1.crt\n\n\nClient1.p12\n\n\n\n\n\n\n\n\n\nThe next table shows to where the files will eventually be exported (server side or client side) and the role they will play (authenticator or authenticatee):\n\n\n\n\n\n\n\n\n\nAuthenticator\n\n\nAuthenticatee\n\n\nServer side file\n\n\nClient side file\n\n\n\n\n\n\n\n\n\n\nClient\n\n\nServer\n\n\nServer1.key-crt.pem\n\n\nRoot1.crt\n\n\n\n\n\n\nServer\n\n\nClient\n\n\nRoot1.crt\n\n\nClient1.p12\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample of making certs with \nprivca\n\n\n\nStep by step guide to creating the certs with provided tool.\n\n\n\n\n\n\ncerts step 1\n\n\n\nOn your main workstation, create a directory named \nRoot1\n which will contain the private CA and all the leaf certificates that private CA issues.\n\nThen \ncd\n to that directory. E.g., \n/etc/ssl/privca.d/Root1\n\n\n\nsudo mkdir /etc/ssl/privca.d/Root1\ncd /etc/ssl/privca.d/Root1\n\n\n\n\ncerts step 2\n\n\n\nCopy the \nprivca\n shell script to that directory, (or place it somewhere in your path).  Make it executable.\n\nwget https://gist.githubusercontent.com/craigphicks/c9dae527b30441730f62c9c9e9dab5a1/raw/dfd43fff631850e6978a6769f82eba76ef6abe60/privca.sh\nmv privca.sh privca\nsudo chmod +x privca\n\n\n\n\n\nNote: For your reference there is a \nman page for privca\n.  Although it is not necessary for this example.\n\n\n\n\ncerts step 3\n\n\nCreate the CA cert.\n\n./privca CreateCA Root1 MyOrg\n\n\n\niwozere\n\n\ncerts step 4\n\n\nCreate the Server cert.\n\n./privca CreateServer PiSrv DNS:pihole.home.lan,DNS:pihole,IP:192.168.1.20\n\n\n\nNote: here it is assumed that you already have local DNS functionality to recognize \npihole.home.lan\n and \npihole\n.  Test any address, including the IP, with \nping\n.\n\n\ncerts step 5\n\n\nCreate the Client cert.  Prepare a password to set for the \n.p12\n certificate.  You will need to use it again when uploading the certificate to Firefox browser.  Hit return only to set no password.\n\n./privca CreateClient Client1\n<interactively enter password>\n\n\n\ncerts step 6\n\n\nConfirm the diretory tree looks like this:\n\n# tree\n.\n\u251c\u2500\u2500 ca\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 private\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 Root1.key\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 public\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 Root1.crt\n\u251c\u2500\u2500 export\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 private\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Client1.p12\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 Server1.key-crt.pem\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 public\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 Root1.crt -> ./ca/public/Root1.crt\n\u251c\u2500\u2500 private\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Client1.key\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 Server1.key\n\u251c\u2500\u2500 public\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Client1.crt\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 Server1.crt\n\u2514\u2500\u2500 temp\n    \u251c\u2500\u2500 Client1.csr\n    \u2514\u2500\u2500 Server1.csr\n\n9 directories, 11 files\n\n\n\nIn our example configuration the files under\nthe \nexport\n directory will be used for configuration.\n\n\n\n\n\n\n\n\n\n\n\n\nSteps to install certs\n\n\nA step by step guide to configuring the certs on \nlighttpd\n and \nFirefox\n.\nIn addition, the required changes to the \nlighttpd\n configuration file\nare shown in detail.\n\n\n\n\ninstall step 1\n\n\nFrom Firefox -\n\n\nClick through\n\n\nPreferences | Privacy & Security | View Certificates | Authorities | Import\n\n\n\n\nto upload\n\n\n./export/ca/public/Root1.crt\n\n\n\n\nThen click through\n\n\nPreferences | Privacy & Security | View Certificates | Your Certificates | Import\n\n\n\n\nto upload\n\n\n./export/private/Root1.p12\n\n\n\n\nWhen uploading, Firefox will ask you for the password you set when creating it, if any.\n\n\n\n\n\n\ninstall steps 2 - 4\n\n\nSteps 2 through 4 describe configuation for \nlighttpd\n.\nIt may also be helpful to read our summary of relevant \nlighttpd\n documentation\nprovided \nhere\n\n\n\n\ninstall step 2\n\n\nCopy files to the serving device running \nlighttpd\n -\n\n\n\n\n\n\n\n\nSource\n\n\nDest Dir\n\n\n\n\n\n\n\n\n\n\n./export/ca/public/Root1.crt\n\n\n/etc/lighttpd/ssl/public/\n\n\n\n\n\n\n./export/private/Server1.key-crt.pem\n\n\n/etc/lighttpd/ssl/private/\n\n\n\n\n\n\n\n\n(The destinations can be freely chosen, this is just an example).\n\n\nSet the destination owner and permission as follows - \n\n\n\n\n\n\n\n\nDir or File\n\n\nowner:group\n\n\nperm\n\n\n\n\n\n\n\n\n\n\n/etc/lighttpd/ssl/public/\n\n\nroot:www-data\n\n\n755\n\n\n\n\n\n\n/etc/lighttpd/ssl/public/Root1.crt\n\n\nroot:www-data\n\n\n644\n\n\n\n\n\n\n/etc/lighttpd/ssl/private/\n\n\nroot:www-data\n\n\n750\n\n\n\n\n\n\n/etc/lighttpd/ssl/private/Server1.key-crt.pem\n\n\nroot:www-data\n\n\n640\n\n\n\n\n\n\n\n\nThese settings allow read access by \nwww-data\n when serving.\n\n\n\n\n\ninstall step 3\n\n\nConfigure an existing \nlighttpd\n configuration file where it configures the \nhttps\n port \n443\n.\nThis might be in a file \n/etc/lighttpd/external.conf\n.\n\n\nIn the case that \nlighttpd\n is already configured for \nhttps\n one-way authentication, then modify/add the following parameter settings to achieve our two-way authentication:\n\n  $SERVER[\"socket\"] == \":443\" {\n    ...\n    ssl.pemfile = \"/etc/lighttpd/ssl/private/Server1.key-crt.pem\"\n    ssl.ca-file =  \"/etc/lighttpd/ssl/public/Root1.crt\"\n    ...\n    ssl.verifyclient.activate = \"enable\"\n    ssl.verifyclient.enforce = \"enable\"\n    ssl.verifyclient.depth = \"2\"\n    ssl.verifyclient.username = \"SSL_CLIENT_S_DN_CN\"\n    }\n\n\n\nIn the case that \nlighttpd\n is not yet configured for \nhttps\n one-way authentication, then here is an example of settings for \nhttps\n two-way authentication:\n\n\n$HTTP[\"host\"] =~ \"pihole($|\\.home\\.lan)\" {\n  # Ensure the Pi-hole Block Page knows that this is not a blocked domain\n  # PIHOLE APPLICATION SPECIFIC - ignore otherwise\n  #setenv.add-environment = (\"fqdn\" => \"true\")\n\n  # Enable the SSL engine with a LE cert, only for this specific host\n  $SERVER[\"socket\"] == \":443\" {\n    ssl.engine = \"enable\"\n    ssl.pemfile = \"/etc/lighttpd/ssl/Server1.key-crt.pem\"\n    ssl.ca-file =  \"/etc/lighttpd/ssl/public/Root1.crt\"\n    ssl.honor-cipher-order = \"enable\"\n    ssl.cipher-list = \"EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH\"\n    ssl.use-sslv2 = \"disable\"\n    ssl.use-sslv3 = \"disable\"\n    # client side authentification       \n    ssl.verifyclient.activate = \"enable\"\n    ssl.verifyclient.enforce = \"enable\"\n    ssl.verifyclient.depth = \"10\"\n    ssl.verifyclient.username = \"SSL_CLIENT_S_DN_CN\"\n###    ssl.verifyclient.username = \"SSL_CLIENT_S_DN_emailAddress\"\n    }\n\n  # Redirect HTTP to HTTPS\n  $HTTP[\"scheme\"] == \"http\" {\n    $HTTP[\"host\"] =~ \".*\" {\n      url.redirect = (\".*\" => \"https://%0$0\")\n    }\n  }\n}\n\n\n\n\n\n\nNote: The above two-way setting were adapted from\n[these one-way settings using an LE cert]\n(https://discourse.pi-hole.net/t/enabling-https-for-your-pi-hole-web-interface/5771).\n\n\n\n\n\n\n\ninstall step 4\n\n\nNow create a new additional \nlighttpd\n configuration file\n\nsudo nano /etc/lighttpd/conf-available/02-auth-cert.conf\n\n\nwith content\n\n# comment out the next line to silence warnings if \"mod_auth\" already loaded\nserver.modules += (\"mod_auth\")\nauth.require = ( \"\" =>\n                 (\n                   \"method\"  => \"extern\",\n                   \"realm\"   => \"certificate\",\n                   \"require\" => \"user=Client1\" \n                 )\n               )\n\n\n\nNote: To allow multiple client IDs, separate by \n|\n and prefix each ID with \nuser=\n, e.g.,:\n\n\n                  \"require\" => \"user=Client1|user=Client2\" \n\n\n\n\n\n\n\n\n\n\ninstall step 5\n\n\nRestart the lighttpd daemon -\n\nsystemctl restart lighttpd\n\n\nor\n\nservice lighttpd restart\n\n\n\nCheck the status is OK -\n\nsystemctl status lighttpd\n\n\nor\n\nservice lighttpd status\n\n\n\n\n\n\ninstall step 6\n\n\nTest access of the server from the Firefox browser, e.g., enter the address \npihole.home.lan\n or \n192.168.1.20\n into the address bar.  On the first access Firefox will put up a dialog box for you to confirm the client certificate \nClient1.p12\n.  If you don't see the dialog box hunt around for it.  I once found it in another workspace under an already existing window.\n\n\n\n\n\ninstall step 7\n\n\nAdd more clients and servers to the network using the same CA, if required.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlighttpd\n documentation on two-way security\n\n\n\n\nThe lighttpd \nSSL documentation\n\ndescribes the relevant parameters for one-way authentication:\n\n\n\n\n\n\n\n\nOption\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nssl.engine\n\n\nenable/disable ssl engine\n\n\n\n\n\n\nssl.pemfile\n\n\npath to the PEM file for SSL support (must contain both certificate and private key)\n\n\n\n\n\n\nssl.ca-file\n\n\npath to the CA file for support of chained certificates\n\n\n\n\n\n\n\n\nThese additional parameters for two-way authentication, i.e. \"Client Side Verification\", are also described:\n\n\n\n\n\n\n\n\nOption\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nssl.verifyclient.activate\n\n\nenable/disable client verification\n\n\n\n\n\n\nssl.verifyclient.enforce\n\n\nenable/disable enforcing client verification\n\n\n\n\n\n\nssl.verifyclient.depth\n\n\ncertificate depth for client verification\n\n\n\n\n\n\nssl.verifyclient.username\n\n\nclient certificate entity to export as env:REMOTE_USER (eg. SSL_CLIENT_S_DN_emailAddress, SSL_CLIENT_S_DN_UID, etc.)\n\n\n\n\n\n\n\n\nSetting\n\n\nssl.verifyclient.username = SSL_CLIENT_S_DN_CN\n\n\n\nwill make  the \"Common Name\" of the client certificate available.\n\n\nWe want to use this \"Common Name\" for authentification in the \nlighttpd\n server itself,\nand not just pass the value to an application.  The \nMod_Auth documentation\n describes how to do this:\n\n\nauth.require = ( \"\" =>\n                 (\n                   \"method\"  => \"extern\",\n                   \"realm\"   => \"certificate\",\n                   \"require\" => \"user=agent007|user=agent008\" \n                 )\n               )\n\n\n\n\nPutting all this information together will be covered in\nsection \niwozere\n\n\n\n\n\n\nSpecial Note on the parameter \nssl.ca-file\n\n\n\n\nThe documentation states purpose as \n\"path to the CA file for support of chained certificates\"\n.  Probably this stentence was written thinking only of the case Server Authentication, where the server is the Authenticee holding a leaf secret-key & cert, and the client is the Authenticator holding the root CA public cert.\n\n\nIn that case, and when when there is an intermediate certificate between the Server's held cert and the client's held root CA cert, purely as a matter of convenience the server will hold and pass the intermediate to the client as part of the SSL handshare.  And to make it even more convenient, the server will hold a copy the root which the client should already have a copy of.  It is necessary the client use their own trusted copy of the root CA for final confirmation.\n\n\nThe intermediate plus root cert is usually bundled together in file named shomething like \"blahblah-fullchain.pem\", and \nssl.ca-file\n is set to point to that file on the server.\n\n\nWhen there is no intermediate certificate involved, and the client held root CA cert has directly \nissued the server held key+cert, the server is not required to hold the root CA to pass \nto the client, Server Authentication can succeed with parameter \nssl.ca-file\n left unset. \n(Tested by the author.)  \n\n\nOn the other hand, in the case of Client Side Authentification, the parameter \nssl.ca-file\n must point to a file holding the CA root certificate at the top of the trust chain which has issed the client's leaf certificate. This is a logical necessity.\n\n\nThe author has only tested these cases:\n - Server Authetication only, with LE 3-level cert.\n - Server Authetication only, with private 2-level cert.\n - Server and Client Side Authentication, both with private 2-level certs, both issued by the same CA.\n\n\nSpecifically the author hasn't tested other cases where multiple mixed roots and intermediates all must be present in the file pointed to by \nssl.ca-file\n.  However the \nlighttpd\n documentation does specifically say it is possible.",
            "title": "Home"
        },
        {
            "location": "/privca-man/",
            "text": "privca\n usage description\n\n\n\nTo keep user required actions to a minumum, the simple bash script \nprivca\n satisfies the following conditions:\n\n\n\n\n\nNo configuration files are used, minimal command line parameters only.\n\n\nTwo levels of certificates only, no intermediate certificates.\n\n\nCertificate file names correspond to their certificate \"Common names\", and leaf \"common names\" include their CA \"common names\"\n\n\n\n\n\nThe program must be executed in the directory which will be used for certificate storage.\n\nTypically the directory would have the same name as the root CA common name.\nThe certificate file owner will be set the program executor.\nAll calls should made by the same executor, e.g., all as user, or all as sudo.\n\n\n\nprivca CreateCA <\nCA common name\n> <\nCA organization name\n>\n\n\n\n\n\nOnly one CA is allowed per directory.\n\n\nNo password is used for the CA private key.  To enable it, modify the \nprivca\n source to remove argument \n-nodes\n in the call to \nopenssl\n in the function \nCreateCA\n.\n\n\n<\nCA common name\n>\n will be the CA common name parameter, which will also be used in the file name.  No spaces or non-filename characters should be used.\n\n\n<\nCA organization name\n>\n is only used as a category index by the Firefox browser.  If you create multiple CA's and always use the same CA organization name, then the various CA's with different common names will appear together under the shared organization name in the browser's \nAuthorities\n list.\n\n\nThe following files will be created:\n\n\n<\nServer common name\n>.key\n : the CA private key\n\n\n<\nServer common name\n>.crt\n : the CA public cert\n\n\n\n\n\n\n\n\n\nprivca CreateServer <\nServer common name\n> <\nsubjectAltNames\n>\n\n\n\n\n\nThe CA must have been already created.  It will be used.\n\n\n<\nServer common name\n>\n will be the sever common name parameter, and that will also be used in the filename.  No spaces or non-filename character should be used.\n\n\nThe following files will be created:\n\n\n<\nServer common name\n>.key\n : server private key file \n\n\n<\nServer common name\n>.crt\n : server public cert\n\n\n<\nServer common name\n>.key-crt.pem\n : combined key and cert\n  A file \n<\nServer common name\n>.key-crt.pem\n will be created.  This file needs to copied to and configured by the \nlighttpd\n server with the \nssl.pem-file\n parameter.  It functions as the server certificate.\n\n\n\n\n\n\n\n\n\nprivca CreateClient <\nClient common name\n>\n\n\n\n\n\nThe CA must have been already created.  It will be used.\n\n\n<\nClient common name\n>\n will be the common name parameter, and that will also be used for the filename. No spaces or non-filename character should be used.\n\n\nThe following files will be created:\n\n\n<\nClient common name\n>.key\n : server private key file \n\n\n<\nClient common name\n>.crt\n : server public cert\n\n\n<\nClient common name\n>.pks12\n : combined key and cert\n\n\n\n\n\n\n\n\n\n\n\n\nAn example final directory tree:\n\n\n\n\n# tree\n.\n\u251c\u2500\u2500 ca\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 private\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 Root1.key\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 public\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 Root1.crt\n\u251c\u2500\u2500 export\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 private\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Client1.p12\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 Server1.key-crt.pem\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 public\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 Root1.crt -> ./ca/public/Root1.crt\n\u251c\u2500\u2500 private\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Client1.key\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 Server1.key\n\u251c\u2500\u2500 public\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Client1.crt\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 Server1.crt\n\u2514\u2500\u2500 temp\n    \u251c\u2500\u2500 Client1.csr\n    \u2514\u2500\u2500 Server1.csr\n\n9 directories, 11 files",
            "title": "Privca man"
        }
    ]
}